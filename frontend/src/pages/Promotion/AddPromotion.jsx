import React, { useEffect } from "react";
import {
  Form,
  Input,
  InputNumber,
  DatePicker,
  Select,
  Button,
  message,
} from "antd";
import { useNavigate } from "react-router-dom";
import { createPromotion } from "../../../service/api";
import dayjs from "dayjs";

const { Option } = Select;

const AddPromotion = () => {
  const [form] = Form.useForm();
  const navigate = useNavigate();

  const onFinish = async (values) => {
    try {
      const formattedData = {
        ...values,
        NgayBD: values.NgayBD.format("YYYY-MM-DD"),
        NgayKT: values.NgayKT.format("YYYY-MM-DD"),
      };

      await createPromotion(formattedData);
      message.success("Th√™m khuy·∫øn m√£i th√†nh c√¥ng!");
      navigate("/admin/vouchers");
    } catch (error) {
      message.error(
        error.response?.data?.message || "C√≥ l·ªói x·∫£y ra khi th√™m khuy·∫øn m√£i."
      );
    }
  };

  const handleLoaiKMChange = (value) => {
    if (value === "fixed") {
      form.setFieldsValue({ GiamToiDa: undefined }); // Reset gi√° tr·ªã c·ªßa tr∆∞·ªùng Gi·∫£m T·ªëi ƒêa khi ch·ªçn 'fixed'
    }
  };

  return (
    <div className="container">
      <h1 className="h3 text-gray-800 mb-4">Th√™m Khuy·∫øn M√£i</h1>
      <Form
        form={form}
        layout="vertical"
        onFinish={onFinish}
        initialValues={{
          TrangThai: undefined,
          LoaiKM: undefined,
        }}
      >
        <Form.Item
          label="M√£ Khuy·∫øn M√£i"
          name="MaKM"
          rules={[
            { required: true, message: "M√£ khuy·∫øn m√£i l√† tr∆∞·ªùng b·∫Øt bu·ªôc" },
            { min: 3, message: "M√£ khuy·∫øn m√£i ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±" },
            { max: 20, message: "M√£ khuy·∫øn m√£i kh√¥ng ƒë∆∞·ª£c d√†i qu√° 20 k√Ω t·ª±" },
          ]}
        >
          <Input placeholder="Nh·∫≠p m√£ khuy·∫øn m√£i" />
        </Form.Item>

        <Form.Item
          label="T√™n Khuy·∫øn M√£i"
          name="TenKM"
          rules={[
            { required: true, message: "T√™n khuy·∫øn m√£i l√† tr∆∞·ªùng b·∫Øt bu·ªôc" },
          ]}
        >
          <Input placeholder="Nh·∫≠p t√™n khuy·∫øn m√£i" />
        </Form.Item>

        <Form.Item
          label="Lo·∫°i Khuy·∫øn M√£i"
          name="LoaiKM"
          rules={[
            { required: true, message: "Lo·∫°i khuy·∫øn m√£i l√† tr∆∞·ªùng b·∫Øt bu·ªôc" },
          ]}
        >
          <Select
            placeholder="Ch·ªçn lo·∫°i khuy·∫øn m√£i"
            onChange={handleLoaiKMChange}
          >
            <Option value="fixed">Gi·∫£m s·ªë ti·ªÅn c·ªë ƒë·ªãnh</Option>
            <Option value="percentage">Gi·∫£m theo %</Option>
          </Select>
        </Form.Item>

        <Form.Item
          label="Gi√° Tr·ªã Khuy·∫øn M√£i"
          name="GiaTriKM"
          dependencies={["LoaiKM"]}
          rules={[
            {
              required: true,
              message: "Gi√° tr·ªã khuy·∫øn m√£i l√† tr∆∞·ªùng b·∫Øt bu·ªôc",
            },
            ({ getFieldValue }) => ({
              validator(_, value) {
                const loaiKM = getFieldValue("LoaiKM");
                if (value === undefined)
                  return Promise.reject("Vui l√≤ng nh·∫≠p gi√° tr·ªã");
                if (value < 0)
                  return Promise.reject("Gi√° tr·ªã kh√¥ng ƒë∆∞·ª£c l√† s·ªë √¢m");
                if (loaiKM === "percentage") {
                  if (!Number.isInteger(value))
                    return Promise.reject(
                      "Kh√¥ng ƒë∆∞·ª£c nh·∫≠p s·ªë th·∫≠p ph√¢n khi gi·∫£m theo ki·ªÉu %"
                    );
                  if (value > 100) return Promise.reject("Kh√¥ng l·ªõn h∆°n 100%");
                }
                return Promise.resolve();
              },
            }),
          ]}
        >
          <InputNumber
            style={{ width: "100%" }}
            placeholder="Nh·∫≠p gi√° tr·ªã khuy·∫øn m√£i"
          />
        </Form.Item>

        <Form.Item
          label="Gi√° Tr·ªã T·ªëi Thi·ªÉu"
          name="GiaTriToiThieu"
          rules={[
            { required: true, message: "Gi√° tr·ªã t·ªëi thi·ªÉu l√† tr∆∞·ªùng b·∫Øt bu·ªôc" },
            {
              type: "number",
              min: 0,
              message: "Gi√° tr·ªã t·ªëi thi·ªÉu kh√¥ng ƒë∆∞·ª£c √¢m",
            },
          ]}
        >
          <InputNumber
            style={{ width: "100%" }}
            placeholder="Nh·∫≠p gi√° tr·ªã t·ªëi thi·ªÉu ƒë∆°n h√†ng"
          />
        </Form.Item>

        {/* Ki·ªÉm tra n·∫øu Lo·∫°i Khuy·∫øn M√£i kh√¥ng ph·∫£i l√† 'fixed', m·ªõi hi·ªÉn th·ªã tr∆∞·ªùng Gi·∫£m T·ªëi ƒêa */}
        {form.getFieldValue("LoaiKM") !== "fixed" && (
          <Form.Item
            label="Gi·∫£m T·ªëi ƒêa"
            name="GiamToiDa"
            rules={[
              { required: true, message: "Gi·∫£m t·ªëi ƒëa l√† tr∆∞·ªùng b·∫Øt bu·ªôc" },
              {
                type: "number",
                min: 0,
                message: "Gi·∫£m t·ªëi ƒëa kh√¥ng ƒë∆∞·ª£c √¢m",
              },
            ]}
          >
            <InputNumber
              style={{ width: "100%" }}
              placeholder="Nh·∫≠p s·ªë ti·ªÅn gi·∫£m t·ªëi ƒëa"
            />
          </Form.Item>
        )}

        <Form.Item
          label="Ng√†y B·∫Øt ƒê·∫ßu"
          name="NgayBD"
          rules={[
            { required: true, message: "Ng√†y b·∫Øt ƒë·∫ßu l√† tr∆∞·ªùng b·∫Øt bu·ªôc" },
          ]}
        >
          <DatePicker style={{ width: "100%" }} />
        </Form.Item>

        <Form.Item
          label="Ng√†y K·∫øt Th√∫c"
          name="NgayKT"
          dependencies={["NgayBD"]}
          rules={[
            { required: true, message: "Ng√†y k·∫øt th√∫c l√† tr∆∞·ªùng b·∫Øt bu·ªôc" },
            ({ getFieldValue }) => ({
              validator(_, value) {
                const startDate = getFieldValue("NgayBD");
                if (!startDate)
                  return Promise.reject("Vui l√≤ng ch·ªçn Ng√†y B·∫Øt ƒê·∫ßu tr∆∞·ªõc");
                if (value && value.isBefore(startDate, "day")) {
                  return Promise.reject(
                    "Ng√†y K·∫øt Th√∫c ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng Ng√†y B·∫Øt ƒê·∫ßu"
                  );
                }
                return Promise.resolve();
              },
            }),
          ]}
        >
          <DatePicker style={{ width: "100%" }} />
        </Form.Item>

        <Form.Item
          label="Tr·∫°ng Th√°i"
          name="TrangThai"
          rules={[{ required: true, message: "Tr·∫°ng th√°i l√† tr∆∞·ªùng b·∫Øt bu·ªôc" }]}
        >
          <Select placeholder="Ch·ªçn tr·∫°ng th√°i">
            <Option value={1}>üî¥ƒê√£ s·ª≠ d·ª•ng</Option>
            <Option value={2}>üîµƒêang di·ªÖn ra</Option>
          </Select>
        </Form.Item>

        <Form.Item>
          <Button type="primary" htmlType="submit">
            Th√™m Khuy·∫øn M√£i
          </Button>
          <Button
            style={{ marginLeft: "8px" }}
            onClick={() => navigate("/admin/vouchers")}
          >
            Quay L·∫°i
          </Button>
        </Form.Item>
      </Form>
    </div>
  );
};

export default AddPromotion;
